{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","buyme-client/tests/app.lint-test.js","buyme-client/tests/helpers/destroy-app.js","buyme-client/tests/helpers/module-for-acceptance.js","buyme-client/tests/helpers/start-app.js","buyme-client/tests/integration/components/footer-comp-test.js","buyme-client/tests/integration/components/header-comp-test.js","buyme-client/tests/integration/components/todo-item-test.js","buyme-client/tests/test-helper.js","buyme-client/tests/tests.lint-test.js","buyme-client/tests/unit/adapters/application-test.js","buyme-client/tests/unit/controllers/add-item-test.js","buyme-client/tests/unit/controllers/todo-list-test.js","buyme-client/tests/unit/models/task-test.js","buyme-client/tests/unit/routes/add-item-test.js","buyme-client/tests/unit/routes/todo-list-test.js","buyme-client/tests/unit/serializers/application-test.js","buyme-client/tests/unit/services/todo-service-test.js","buyme-client/tests/unit/services/todo-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('buyme-client/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/footer-comp.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/footer-comp.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/header-comp.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/header-comp.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/todo-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/todo-item.js should pass ESLint\\n\\n6:9 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n7:10 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n15:24 - \\'id\\' is defined but never used. (no-unused-vars)\\n19:15 - Unexpected console statement. (no-console)\\n21:15 - Unexpected console statement. (no-console)\\n32:17 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/add-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/add-item.js should pass ESLint\\n\\n6:11 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)');\n  });\n\n  QUnit.test('controllers/todo-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/todo-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/task.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/task.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/add-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/add-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/todo-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/todo-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/todo.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/todo.js should pass ESLint\\n\\n6:10 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n18:15 - Unexpected console statement. (no-console)\\n24:13 - Unexpected console statement. (no-console)\\n29:11 - Unexpected console statement. (no-console)');\n  });\n});","define('buyme-client/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('buyme-client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'buyme-client/tests/helpers/start-app', 'buyme-client/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('buyme-client/tests/helpers/start-app', ['exports', 'buyme-client/app', 'buyme-client/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('buyme-client/tests/integration/components/footer-comp-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('footer-comp', 'Integration | Component | footer comp', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"I7bKgbQE\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"footer-comp\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5vPlPt/5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"footer-comp\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('buyme-client/tests/integration/components/header-comp-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('header-comp', 'Integration | Component | header comp', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"bP2LaV72\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"header-comp\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"4HOe9lQ+\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"header-comp\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('buyme-client/tests/integration/components/todo-item-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('todo-item', 'Integration | Component | todo item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VodEiyUW\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"todo-item\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"AxYyXTkF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"todo-item\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('buyme-client/tests/test-helper', ['buyme-client/app', 'buyme-client/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('buyme-client/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/footer-comp-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/footer-comp-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/header-comp-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/header-comp-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/todo-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/todo-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/add-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/add-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/todo-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/todo-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/task-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/task-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/add-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/add-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/todo-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/todo-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/todo-service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/todo-service-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/todo-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/todo-test.js should pass ESLint\\n\\n');\n  });\n});","define('buyme-client/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('buyme-client/tests/unit/controllers/add-item-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:add-item', 'Unit | Controller | add item', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('buyme-client/tests/unit/controllers/todo-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:todo-list', 'Unit | Controller | todo list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('buyme-client/tests/unit/models/task-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('task', 'Unit | Model | task', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('buyme-client/tests/unit/routes/add-item-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:add-item', 'Unit | Route | add item', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('buyme-client/tests/unit/routes/todo-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:todo-list', 'Unit | Route | todo list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('buyme-client/tests/unit/serializers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('buyme-client/tests/unit/services/todo-service-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:todo-service', 'Unit | Service | todo service', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('buyme-client/tests/unit/services/todo-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:todo', 'Unit | Service | todo', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('buyme-client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;","file":"tests.js"}